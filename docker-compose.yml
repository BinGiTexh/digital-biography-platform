version: '3.8'

services:
  # API Service - Node.js v22 on port 3001
  api:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
      target: development
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/bingitech_dev
      - REDIS_URL=redis://redis:6379
      - PORT=3001
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./agents:/app/agents
      - ./clients:/app/clients
    depends_on:
      - postgres
      - redis
    networks:
      - bingitech-network

  # Agent System (Python)
  agents:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.agents
      target: development
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/bingitech_dev
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    volumes:
      - ./agents:/app/agents
      - ./clients:/app/clients
      - ./shared:/app/shared
    depends_on:
      - postgres
      - redis
    networks:
      - bingitech-network

  # PostgreSQL Database - Port 5433 to avoid conflicts
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: bingitech_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bingitech-network

  # Redis - Port 6380 to avoid conflicts
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - bingitech-network

volumes:
  postgres_data:
  redis_data:

networks:
  bingitech-network:
    driver: bridge

